package de.uni_hildesheim.sse.kernel_miner.code;

import de.uni_hildesheim.sse.kernel_miner.util.ExpressionFormatException;
import de.uni_hildesheim.sse.kernel_miner.util.logic.Formula;
import de.uni_hildesheim.sse.kernel_miner.util.parser.CStyleBooleanGrammar;
import de.uni_hildesheim.sse.kernel_miner.util.parser.Grammar;
import de.uni_hildesheim.sse.kernel_miner.util.parser.VariableCache;

/**
 * A {@link Grammar} for the presence conditions generated by TypeChef.
 * 
 * <p>
 * Examples:
 * <ul>
 *      <li><code>definedEx(CONFIG_X86_64)</code></li>
 *      <li><code>(definedEx(CONFIG_X86_PAE) && !definedEx(CONFIG_X86_64) && (definedEx(CONFIG_X86_64) || definedEx(CONFIG_X86_PAE)))</code></li>
 * </ul>
 * </p>
 * 
 * @author Adam Krafczyk
 */
public class TypeChefPresenceConditionGrammar extends CStyleBooleanGrammar {
    
    public TypeChefPresenceConditionGrammar(VariableCache cache) {
        super(cache);
    }

    private boolean isSubstingEqual(char[] str, int i, String compareTo) {
        if (i < 0) {
            return false;
        }
        
        for (int j = i; j - i < compareTo.length(); j++) {
            if (str[j] != compareTo.charAt(j - i)) {
                return false;
            }
        }
        return true;
    }
    
    @Override
    public boolean isOpeningBracketChar(char[] str, int i) {
        if (str[i] != '(') {
            return false;
        }
        
        // check that this is not the bracket of a defined()
        if (i >= "defined".length()) {
            if (isSubstingEqual(str, i - "defined".length(), "defined")) {
                return false;
            }
        }
        
        // check that this is not the bracket of a definedEx()
        if (i >= "definedEx".length()) {
            if (isSubstingEqual(str, i - "definedEx".length(), "definedEx")) {
                return false;
            }
        }
        
        return true;
    }

    @Override
    public boolean isClosingBracketChar(char[] str, int i) {
        if (str[i] != ')') {
            return false;
        }
        
        // check that this is not the bracket of a definedEx()
        int j = i - 1;
        while (j > 0 && super.isIdentifierChar(str, j)) {
            j--;
        }
        
        if (str[j] != '(') {
            return true;
        }
        
        if (isSubstingEqual(str, j - "defined".length(), "defined")) {
            return false;
        }
        
        if (isSubstingEqual(str, j - "definedEx".length(), "definedEx")) {
            return false;
        }

        return true;
    }

    @Override
    public boolean isIdentifierChar(char[] str, int i) {
        return super.isIdentifierChar(str, i)
                || (str[i] == '(')
                || (str[i] == ')');
    }
    
    @Override
    public Formula makeIdentifierFormula(String identifier) throws ExpressionFormatException {
        if (!identifier.matches("defined(Ex)?\\([a-zA-Z0-9_]+\\)")) {
            throw new ExpressionFormatException("Identifier \"" + identifier + "\" is not valid definedEx() expression");
        }
        
        if (identifier.startsWith("definedEx")) {
            identifier = identifier.substring("definedEx(".length(), identifier.length() - 1);
        } else {
            identifier = identifier.substring("defined(".length(), identifier.length() - 1);
        }
        
        return super.makeIdentifierFormula(identifier);
    }
    
}
