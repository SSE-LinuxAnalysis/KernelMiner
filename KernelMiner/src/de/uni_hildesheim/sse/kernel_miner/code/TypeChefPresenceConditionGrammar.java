package de.uni_hildesheim.sse.kernel_miner.code;

import de.uni_hildesheim.sse.kernel_miner.util.ExpressionFormatException;
import de.uni_hildesheim.sse.kernel_miner.util.logic.Formula;
import de.uni_hildesheim.sse.kernel_miner.util.logic.Negation;
import de.uni_hildesheim.sse.kernel_miner.util.logic.Variable;
import de.uni_hildesheim.sse.kernel_miner.util.parser.Grammar;
import de.uni_hildesheim.sse.kernel_miner.util.parser.SimpleCStyleBooleanGrammar;

/**
 * A {@link Grammar} for the presence conditions generated by TypeChef.
 * 
 * <p>
 * Examples:
 * <ul>
 *      <li><code>definedEx(CONFIG_X86_64)</code></li>
 *      <li><code>(definedEx(CONFIG_X86_PAE) && !definedEx(CONFIG_X86_64) && (definedEx(CONFIG_X86_64) || definedEx(CONFIG_X86_PAE)))</code></li>
 * </ul>
 * </p>
 * 
 * @author Adam Krafczyk
 */
public class TypeChefPresenceConditionGrammar extends SimpleCStyleBooleanGrammar {

    @Override
    public String getOperator(String str, int i) {
        if (str.charAt(i) == '!') {
            return "!";
        }
        
        if (str.substring(i).startsWith("&&")) {
            return "&&";
        }
        
        if (str.substring(i).startsWith("||")) {
            return "||";
        }
        
        if (str.substring(i).startsWith("definedEx")) {
            return "definedEx";
        }
        
        return null;
    }
    
    @Override
    public boolean hasHigherPrecendece(String toCheck, String comparedTo) {
        if (toCheck.equals("&&") || toCheck.equals("||")) {
            // && and || have higher precendce than ! or definedEx
            return comparedTo.equals("!") || comparedTo.equals("definedEx");
        } else {
            // ! has higher precedence that definedEx
            return comparedTo.equals("definedEx"); 
        }
    }

    @Override
    public boolean isBinary(String operator) {
        return operator.equals("||") || operator.equals("&&");
    }
    
    @Override
    public Formula makeUnaryFormula(String operator, Formula child) throws ExpressionFormatException {
        if (operator.equals("!")) {
            return new Negation(child);
            
        } else {
            if (!(child instanceof Variable)) {
                throw new ExpressionFormatException("definedEx can only be applied to variabiles");
            }
            return child;
        }
    }
    
}
