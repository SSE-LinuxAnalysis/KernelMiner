package de.uni_hildesheim.sse.kernel_miner.code;

import de.uni_hildesheim.sse.kernel_miner.util.ExpressionFormatException;
import de.uni_hildesheim.sse.kernel_miner.util.logic.Formula;
import de.uni_hildesheim.sse.kernel_miner.util.logic.Variable;
import de.uni_hildesheim.sse.kernel_miner.util.parser.CStyleBooleanGrammar;
import de.uni_hildesheim.sse.kernel_miner.util.parser.Grammar;
import de.uni_hildesheim.sse.kernel_miner.util.parser.Parser;

/**
 * A {@link Grammar} for the presence conditions generated by TypeChef.
 * 
 * <p>
 * Examples:
 * <ul>
 *      <li><code>definedEx(CONFIG_X86_64)</code></li>
 *      <li><code>(definedEx(CONFIG_X86_PAE) && !definedEx(CONFIG_X86_64) && (definedEx(CONFIG_X86_64) || definedEx(CONFIG_X86_PAE)))</code></li>
 * </ul>
 * </p>
 * 
 * @author Adam Krafczyk
 */
public class TypeChefPresenceConditionGrammar extends CStyleBooleanGrammar {

    @Override
    public boolean isOpeningBracketChar(String str, int i) {
        if (str.charAt(i) != '(') {
            return false;
        }
        
        // check that this is not the bracket of a definedEx()
        if (i >= "definedEx".length()) {
            String part = str.substring(i - "definedEx".length(), i);
            if (part.equals("definedEx")) {
                return false;
            }
        }
        
        return true;
    }

    @Override
    public boolean isClosingBracketChar(String str, int i) {
        if (str.charAt(i) != ')') {
            return false;
        }
        
        // check that this is not the bracket of a definedEx()
        int j = i - 1;
        while (j > 0 && str.substring(j, j + 1).matches("[a-zA-Z0-9_]")) {
            j--;
        }
        
        if (str.charAt(j) != '(') {
            return true;
        }
        
        String part = str.substring(j - "definedEx".length(), j);
        if (part.equals("definedEx")) {
            return false;
        }

        return true;
    }

    @Override
    public boolean isIdentifierChar(String str, int i) {
        return str.substring(i, i + 1).matches("[a-zA-Z0-9_()]");
    }
    
    @Override
    public Formula makeIdentifierFormula(String identifier) throws ExpressionFormatException {
        if (!identifier.matches("definedEx\\([a-zA-Z0-9_]+\\)")) {
            throw new ExpressionFormatException("Identifier \"" + identifier + "\" is not valid definedEx() expression");
        }
        
        identifier = identifier.substring("definedEx(".length(), identifier.length() - 1);
        
        return new Variable(identifier);
    }
    
    public static void main(String[] args) throws ExpressionFormatException {
        String f = "(definedEx(CONFIG_X86_PAE) && !definedEx(CONFIG_X86_64) && (definedEx(CONFIG_X86_64) || definedEx(CONFIG_X86_PAE)))";
        System.out.println(new Parser<Formula>(new TypeChefPresenceConditionGrammar()).parse(f));
    }
    
}
