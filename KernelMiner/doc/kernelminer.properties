
### General

# The log file; "stdout" to log to console
logFile = stdout

### TypeChef

# The path to the TypeChef executable or .jar file
typechef.exe =

# The path to the source directory that TypeChef should analyze
typechef.sourceDir =

# The prefix of the Kconfig models
# This path is used with the suffixes ".dimacs", ".features", ".completed.h" and "nonbool.h"
typechef.kconfigModelBase =

# The path to the system root; system include directories are located relative to this
typechef.systemRoot = /

# The path to the output .zip archive
typechef.output = typechef_output.zip

# The path to the working directory, where TypeChef will place temporary files
typechef.workingDir = .

# The path to a header that contains a partial configuration. This is included at the
#  top of each source file
typechef.partialConfHeader = res/typechef/partial_conf.h

# The path to a header that contains the platform symbols as used by a compiler.
# This is included at the top of each source file
typechef.platformHeader = res/typechef/platform.h

# The path to the file that contains the presence conditions for all files
# This is usually generated by KbuildMiner
typechef.pcFile =

# The list of system include directories
# Each entry gets a new key, with $num$ replaced by numbers, starting from 0
# If none are specified (i.e. typechef.postIncludeDir.0 is not present) then the
#  default system include directories for a typical Ubuntu installation are used
# These paths are relative to typechef.systemRoot
typechef.postIncludeDir.$num$ =

# The list of source include directories
# Each entry gets a new key, with $num$ replaced by numbers, starting from 0
# These paths are relative to typechef.sourceDir
typechef.sourceIncludeDir.$num$ =

# The architecture to analyze; this used to fill typechef.sourceIncludeDir with the default paths for Linux
# If left empty, then no default Linux include directories are added
typechef.arch =

# The number of TypeChef instances to run in parallel
typechef.numTypeChefThreads = 1

# The number of parsers for the TypeChef output to run in parallel
typechef.numParserThreads   = 1

# A list of files to run on. This filters the set of files that are available for parsing.
# Each entry gets a new key, with $num$ replaced by numbers, starting from 0
# If none are specified, then all available files are parsed.
typechef.files.$num$ =
